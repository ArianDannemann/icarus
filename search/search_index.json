{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Icarus chess","text":"<p>Welcome to Icarus, a simple python chess UI!</p>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#installing-dependencies","title":"Installing dependencies","text":"<p>Below is a list of all dependencies, how to install them and why we need them:</p> <ul> <li>Tkinter, <code>pip install tk</code>, used for the graphical user interface</li> <li>PIL, <code>pip install Pillow</code>, used to load images for the chess pieces</li> <li>typing, <code>pip install typing</code>, used to provide typing information</li> <li>Mkdocs, <code>apt install mkdocs</code>, used to generate our documentation</li> <li>Mkdocs material theme, <code>pip install mkdocs-material</code>, theme for the documentation</li> </ul> <p>Alternatively, you can run <code>bash scripts/install_dependencies.sh</code> from the root directory.</p> <p>Note</p> <p>This will only install dependencies necessary to run the app. If you want to build the documentation, you will need to install the needed dependencies from the list above.</p>"},{"location":"getting_started/#setting-up-a-board","title":"Setting up a board","text":"<p>In order to setup a board, we will need to import the <code>board</code> class:</p> <pre><code>import board\n</code></pre> <p>We can then create a local instance of a board. This means Icarus supports multiple games being played at once on different boards:</p> <pre><code>my_board: board.Board = board.Board()\n</code></pre> <p>And finally place pieces in the standard chess starting position:</p> <pre><code>my_board.setup()\n</code></pre>"},{"location":"getting_started/#displaying-the-board","title":"Displaying the board","text":"In the consoleIn the GUI <p>Since we have already created our board, we can used its own <code>display</code> method to print it to the console:</p> <pre><code>my_board.display()\n</code></pre> <p>In order to display our board in a GUI, we need to create an instance of the <code>UI</code> class:</p> <pre><code>import ui\n\nmy_ui: ui.UI = ui.UI()\nmy_ui.init(my_board)\nmy_ui.keep_alive()\n</code></pre> <p>Note</p> <p><code>UI.keep_alive()</code> runs the main loop of the Tk \"root\" widget. Without this, the GUI would show up once and immediatly disappear again.</p>"},{"location":"reference/","title":"Reference","text":"<p>Below you will find a list of the most importants methods of each class.</p> <p>Tip</p> <p>This is by no means a complete list. The codebase is simple, try browsing around a bit!</p>"},{"location":"reference/#board","title":"Board","text":""},{"location":"reference/#setup","title":"<code>setup</code>","text":"ParametersDescriptionUsage <p>None</p> <p>Setup the board with the standard chess starting position.</p> <pre><code>import board\n\nmy_board: board.Board = board.Board()\nmy_board.setup()\n</code></pre>"},{"location":"reference/#move_piece","title":"<code>move_piece</code>","text":"ParametersDescriptionUsage <ul> <li>Input:<ul> <li><code>row: int</code>, The current row of the piece you want to move</li> <li><code>file: int</code>, The current file of the piece you want to move</li> <li><code>new_row: int</code>, The row you want the piece to move to</li> <li><code>new_file: int</code>, The file you want the piece to move to</li> </ul> </li> <li>Output:<ul> <li><code>True</code> if the move was legal and could be executed, <code>False</code> otherwise</li> </ul> </li> </ul> <p>Moves a piece according to standard chess rules.</p> <p>If you want to ignore rules and simply change the position of a piece, take a look at <code>teleport_piece</code>.</p> <p>The example belows plays the opening move 1. e4 for white.</p> <pre><code>import board\n\nmy_board: board.Board = board.Board()\nmy_board.setup()\nmy_board.move_piece(1, 3, 3, 3)\n</code></pre>"},{"location":"reference/#teleport_piece","title":"<code>teleport_piece</code>","text":"ParametersDescriptionUsage <ul> <li>Input:<ul> <li><code>row: int</code>, The current row of the piece you want to move</li> <li><code>file: int</code>, The current file of the piece you want to move</li> <li><code>new_row: int</code>, The row you want the piece to move to</li> <li><code>new_file: int</code>, The file you want the piece to move to</li> </ul> </li> </ul> <p>Similar to <code>move_piece</code> but will ignore all chess rules.</p> <p>The example belows will open the game by placing whites queens pawn on the square of the black queen, whiping it out in the process.</p> <p>This is illegal, since:</p> <ul> <li>The pawn moves more than two spaces on the first move</li> <li>The pawn takes in a direction other than a diagonal</li> <li>The pawn moves over pieces</li> <li>The pawn is now placed on the last row, without having been promoted</li> </ul> <pre><code>import board\n\nmy_board: board.Board = board.Board()\nmy_board.setup()\nmy_board.teleport_piece(1, 3, 7, 3)\n</code></pre>"},{"location":"reference/#piece","title":"Piece","text":"<p>tbd</p>"},{"location":"reference/#ui","title":"UI","text":"<p>tbd</p>"}]}